import moment from "moment-timezone";
import { isDate } from "util/types";

import { EventPayment } from "#root/backend/entities/event.js";
import { Event, EventWithSignup } from "#root/backend/event.js";
import { config } from "#root/config.js";

import { Context } from "../context.js";
import { toFluentDateTime } from "./i18n.js";
import { signupLink } from "./links.js";
import { sanitizeHtmlOrEmpty } from "./sanitize-html.js";

// TODO: make it not hardcoded
export const DEFAULT_EVENT_TEXT = `
<b>{ title }</b>

–°–ª–µ–¥—É—é—â–∏–π –∫–≤–∞—Ä—Ç–∏—Ä–Ω–∏–∫ –±—É–¥–µ—Ç { date | DD MMMM }!

–ß—Ç–æ –±—É–¥–µ—Ç: —É—é—Ç–Ω–∞—è –∫–∏–Ω–∫–∏-—Å–µ–∫—Å-–∫–≤–∏—Ä–Ω–∞—è —Ç—É—Å–æ–≤–æ—á–∫–∞. –£ –Ω–∞—Å –ø—Ä–∞–≤–∏–ª–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è, –ë–î–† –∏ 4C ü•∞ –î–ª—è –õ–ì–ë–¢ –ª—é–¥–µ–π –∏ —Å–æ—é–∑–Ω–∏–∫–æ–≤.
- –°–±–æ—Ä –≤ { date | HH:mm }, –∫—Ä—É–≥ –∑–Ω–∞–∫–æ–º—Å—Ç–≤ –≤ { datePlus1h | HH:mm }.
- –ë—É–¥–µ—Ç —Ç—É—Å–æ–≤–æ—á–Ω–æ-–æ–±—â–∞—Ç–µ–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ aka –∫—É—Ö–Ω—è-–≥–æ—Å—Ç–∏–Ω–∞—è, –∫–æ–º–Ω–∞—Ç–∞ –¥–ª—è —Ç–∏—Ö–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫ (–æ–±–Ω–∏–º–∞—à–∫–∏, —à–∏–±–∞—Ä–∏, –≤–æ—Å–∫), –∫–æ–º–Ω–∞—Ç–∞ –¥–ª—è –±–æ–ª–µ–µ –≥—Ä–æ–º–∫–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫ (—Å–µ–∫—Å, –ø–æ—Ä–∫–∞, –∏ –≤–æ—Ç —ç—Ç–æ –≤–æ—Ç –≤—Å—ë).
- –£ –Ω–∞—Å –µ—Å—Ç—å —Ç–æ—á–∫–∞ –ø–æ–¥–≤–µ—Å–∞!
- –†–∞–∑—Ä–µ—à–µ–Ω—ã –≤—Å–µ –ë–î–°–ú –ø—Ä–∞–∫—Ç–∏–∫–∏ –∫—Ä–æ–º–µ –∏–≥—Ä —Å –¥—ã—Ö–∞–Ω–∏–µ–º.
- –í –Ω–∞–ª–∏—á–∏–∏ –µ—Å—Ç—å –¥—É—à.
- –ü—Ä–∞–≤–∏–ª–∞ –≤–µ—á–µ—Ä–∏–Ω–∫–∏: <a href="https://t.me/regbot?rulesLink">—Å–º–æ—Ç—Ä–∏ —Ç—É—Ç</a>.

–ì–¥–µ –∏ –∫–æ–≥–¥–∞: { date | dddd, DD MMMM }, —Å { date | HH:mm } –∏ –¥–æ —É—Ç—Ä–∞. –¢–±–∏–ª–∏—Å–∏, —Ä–∞–π–æ–Ω –í–∞–∫–µ, 20 –º–∏–Ω—É—Ç –ø–µ—à–∫–æ–º –æ—Ç –†—É—Å—Ç–∞–≤–µ–ª–∏.

–í—Ö–æ–¥: { price }.

–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è <a href="https://t.me/regbot?signupLink">–ø–æ —Å—Å—ã–ª–∫–µ</a>.

–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ, –±–µ—Ä–∏—Ç–µ —Å —Å–æ–±–æ–π –¥–µ–≤–∞–π—Å—ã –∏ —Ö–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ)
`.trim();

export function formatEventTitleForMenu(ctx: Context, event: EventWithSignup) {
  let titlePrefix = "";
  if (event.cancelled) {
    titlePrefix = `${ctx.t("event.title_cancelled_prefix")} `;
  } else if (event.dateChanged) {
    titlePrefix = `${ctx.t("event.title_date_change_prefix")} `;
  }
  if (event.signup !== undefined) {
    titlePrefix += `${ctx.t("event.title_signup_prefix", { status: event.signup.status })} `;
  }

  return ctx.t("event.title_with_date", {
    title: event.name,
    date: toFluentDateTime(event.date),
    titlePrefix,
  });
}

export function formatEventTitleForPost(ctx: Context, event: Event) {
  let titlePrefix = "";
  if (event.cancelled) {
    titlePrefix = `${ctx.t("event.title_cancelled_prefix")} `;
  } else if (event.dateChanged) {
    titlePrefix = `${ctx.t("event.title_date_change_prefix")} `;
  }

  return ctx.t("event.title", {
    title: event.name,
    titlePrefix,
  });
}

export function formatEventText(ctx: Context, event: Event) {
  return simpleTemplate(event.announceTextHtml, {
    title: formatEventTitleForPost(ctx, event),
    date: event.date,
    datePlus1h: moment(event.date).add({ hours: 1 }).toDate(),
    rulesLink:
      "https://taminomara.notion.site/1f06a005adb344ffb0f3be28804bbd9f", // TODO: make it not hardcoded (here and in locales)
    signupLink: signupLink(ctx.me.username, event.id),
    price: formatEventPrice(ctx, event),
  });
}

export function formatEventPrice(ctx: Context, event: Event) {
  switch (event.payment) {
    case EventPayment.NotRequired:
      return ctx.t("event.free");
    case EventPayment.Donation:
      if (event.price === null) {
        return ctx.t("event.free_donation");
      } else {
        return sanitizeHtmlOrEmpty(event.price);
      }
    case EventPayment.Required:
      return sanitizeHtmlOrEmpty(event.price);
  }
}

export function simpleTemplate(
  template: string,
  data: Record<string, string | number | Date>,
): string {
  return template
    .replaceAll(
      /\{\s*([a-zA-Z0-9]+)\s*(?:\|\s*([^}]+)\s*)?\}|(\{\{)|(\}\})/gm,
      (_, name, format, lbrace, rbrace) => {
        if (lbrace !== undefined) return "{";
        if (rbrace !== undefined) return "}";
        const val = data[name];
        if (!val) return "";
        if (isDate(val))
          return moment
            .utc(val)
            .locale(config.DEFAULT_LOCALE)
            .tz(config.TIMEZONE)
            .format(format ?? "dd, DD.MM HH:MM")
            .trim();
        return val.toString();
      },
    )
    .replaceAll(/https:\/\/t.me\/regbot\?([a-zA-Z0-9]+)/gm, (_, name) =>
      data[name].toString(),
    );
}
